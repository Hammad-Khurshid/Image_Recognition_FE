{"ast":null,"code":"var _jsxFileName = \"/home/hammad/Desktop/smart_brain/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Clarifai from 'clarifai';\nimport Navigation from './Components/Navigation/Navigation';\nimport Logo from './Components/Logo/Logo';\nimport ImageLinkForm from './Components/ImageLinkFrom/ImageLinkForm';\nimport Rank from './Components/Rank/Rank';\nimport Prtls from './Components/Particles/Particles';\nimport FaceRecognition from './Components/FaceRecognition/FaceRecognition';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst USER_ID = 'hadi_01';\nconst PAT = '9a0cf551bffe4b2ab6c4c5903d0a6e79';\nconst APP_ID = 'First-Application'; //  const API_KEY =  'eec46ed0322e4dfab533a8a76f938c64';\n\nconst MODEL_ID = 'color-recognition';\nconst MODEL_VERSION_ID = 'dd9458324b4b45c2be1a7ba84d27cd04'; // const IMAGE_URL = ' ';\n\nconst IMAGE_URL = 'https://samples.clarifai.com/metro-north.jpg';\nconst raw = new Clarifai.App({\n  \"apiKey\": 'eec46ed0322e4dfab533a8a76f938c64',\n  \"user_app_id\": {\n    \"user_id\": USER_ID,\n    \"app_id\": APP_ID\n  },\n  \"inputs\": [{\n    \"data\": {\n      \"image\": {\n        \"url\": IMAGE_URL\n      }\n    }\n  }]\n});\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.onInputChange = event => {\n      // this.setstate({input: event.target.value});\n      this.setState({\n        input: event.target.value\n      });\n    };\n\n    this.onTap = () => {\n      this.setState({\n        IMAGEURL: this.state.input\n      });\n      raw.models.predict( // HEADS UP! Sometimes the Clarifai Models can be down or not working as they are constantly getting updated.\n      // A good way to check if the model you are using is up, is to check them on the clarifai website. For example,\n      // for the Face Detect Mode: https://www.clarifai.com/models/face-detection\n      // If that isn't working, then that means you will have to wait until their servers are back up. Another solution\n      // is to use a different version of their model that works like the ones found here: https://github.com/Clarifai/clarifai-javascript/blob/master/src/index.js\n      // so you would change from:\n      // .predict(Clarifai.FACE_DETECT_MODEL, this.state.input)\n      // to:\n      // .predict('53e1df302c079b3db8a0a36033ed2d15', this.state.input)\n      Clarifai.FACE_DETECT_MODEL, this.state.input).then(response => {\n        console.log('hi', response);\n\n        if (response) {\n          fetch('http://localhost:3000/image', {\n            method: 'put',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              id: this.state.user.id\n            })\n          });\n        }\n      }); //   const requestOptions = {\n      //     method: 'POST',\n      //     headers: {\n      //         'Accept': 'application/json',\n      //         'Authorization': 'key ' + PAT\n      //     },\n      //     body: raw\n      // };\n      // // NOTE: MODEL_VERSION_ID is optional, you can also call prediction with the MODEL_ID only\n      // // https://api.clarifai.com/v2/models/{YOUR_MODEL_ID}/outputs\n      // // this will default to the latest version_id\n      // fetch(\"https://api.clarifai.com/v2/models/\" + MODEL_ID + \"/versions/\" + MODEL_VERSION_ID + \"/outputs\", requestOptions)\n      //     .then(response => response.json())\n      //     .then(result => console.log('resolved', result))\n      //     .catch(error => console.log('error', error));\n    };\n\n    this.state = {\n      input: '',\n      IMAGEURL: ''\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Prtls, {\n        className: \"particles\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(Rank, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(ImageLinkForm, {\n        onInputChange: this.onInputChange,\n        onTap: this.onTap\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(FaceRecognition, {\n        IMAGEURL: this.state.IMAGEURL\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"names":["React","Component","Clarifai","Navigation","Logo","ImageLinkForm","Rank","Prtls","FaceRecognition","USER_ID","PAT","APP_ID","MODEL_ID","MODEL_VERSION_ID","IMAGE_URL","raw","App","constructor","onInputChange","event","setState","input","target","value","onTap","IMAGEURL","state","models","predict","FACE_DETECT_MODEL","then","response","console","log","fetch","method","headers","body","JSON","stringify","id","user","render"],"sources":["/home/hammad/Desktop/smart_brain/src/App.js"],"sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Clarifai from 'clarifai';\nimport Navigation from './Components/Navigation/Navigation';\nimport Logo from './Components/Logo/Logo';\nimport ImageLinkForm from './Components/ImageLinkFrom/ImageLinkForm';\nimport Rank from './Components/Rank/Rank';\nimport Prtls from './Components/Particles/Particles';\nimport FaceRecognition from './Components/FaceRecognition/FaceRecognition';\n    \n  \n\n      const USER_ID = 'hadi_01';\n      const PAT = '9a0cf551bffe4b2ab6c4c5903d0a6e79';\n      const APP_ID = 'First-Application';\n      //  const API_KEY =  'eec46ed0322e4dfab533a8a76f938c64';\n      const MODEL_ID = 'color-recognition';\n      const MODEL_VERSION_ID = 'dd9458324b4b45c2be1a7ba84d27cd04';    // const IMAGE_URL = ' ';\n      const IMAGE_URL = 'https://samples.clarifai.com/metro-north.jpg';\n      \n      \n      const raw = new Clarifai.App({\n        \"apiKey\": 'eec46ed0322e4dfab533a8a76f938c64' ,\n\n        \"user_app_id\": {\n          \"user_id\": USER_ID,\n          \"app_id\": APP_ID\n      },\n      \"inputs\": [\n          {\n              \"data\": {\n                  \"image\": {\n                      \"url\": IMAGE_URL\n                  }\n              }\n          }\n      ]\n  });\n\n\nclass  App extends Component {\n  constructor(){\n    super();\n    this.state={\n      input: '',\n      IMAGEURL: '',\n    }\n  }\n  \n   onInputChange = (event) => {\n    // this.setstate({input: event.target.value});\n    this.setState({input: event.target.value});\n  }\n\n  onTap = ()=>{\n\n   \n    this.setState({IMAGEURL: this.state.input});\n    raw.models\n      .predict(\n    // HEADS UP! Sometimes the Clarifai Models can be down or not working as they are constantly getting updated.\n    // A good way to check if the model you are using is up, is to check them on the clarifai website. For example,\n    // for the Face Detect Mode: https://www.clarifai.com/models/face-detection\n    // If that isn't working, then that means you will have to wait until their servers are back up. Another solution\n    // is to use a different version of their model that works like the ones found here: https://github.com/Clarifai/clarifai-javascript/blob/master/src/index.js\n    // so you would change from:\n    // .predict(Clarifai.FACE_DETECT_MODEL, this.state.input)\n    // to:\n    // .predict('53e1df302c079b3db8a0a36033ed2d15', this.state.input)\n        Clarifai.FACE_DETECT_MODEL,\n        this.state.input)\n      .then(response => {\n        console.log('hi', response)\n        if (response) {\n          fetch('http://localhost:3000/image', {\n            method: 'put',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({\n              id: this.state.user.id\n            })\n          })}})\n  //   const requestOptions = {\n  //     method: 'POST',\n  //     headers: {\n  //         'Accept': 'application/json',\n  //         'Authorization': 'key ' + PAT\n  //     },\n  //     body: raw\n  // };\n\n  // // NOTE: MODEL_VERSION_ID is optional, you can also call prediction with the MODEL_ID only\n  // // https://api.clarifai.com/v2/models/{YOUR_MODEL_ID}/outputs\n  // // this will default to the latest version_id\n\n  // fetch(\"https://api.clarifai.com/v2/models/\" + MODEL_ID + \"/versions/\" + MODEL_VERSION_ID + \"/outputs\", requestOptions)\n  //     .then(response => response.json())\n  //     .then(result => console.log('resolved', result))\n  //     .catch(error => console.log('error', error));\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <Prtls className=\"particles\"/>\n      <Navigation />\n       <Logo />\n       <Rank />\n      <ImageLinkForm \n      onInputChange={this.onInputChange} \n      onTap={this.onTap} />\n      <FaceRecognition IMAGEURL={this.state.IMAGEURL} />\n    </div>\n  );\n}\n}\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,OAAOC,UAAP,MAAuB,oCAAvB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,aAAP,MAA0B,0CAA1B;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,KAAP,MAAkB,kCAAlB;AACA,OAAOC,eAAP,MAA4B,8CAA5B;;AAIM,MAAMC,OAAO,GAAG,SAAhB;AACA,MAAMC,GAAG,GAAG,kCAAZ;AACA,MAAMC,MAAM,GAAG,mBAAf,C,CACA;;AACA,MAAMC,QAAQ,GAAG,mBAAjB;AACA,MAAMC,gBAAgB,GAAG,kCAAzB,C,CAAgE;;AAChE,MAAMC,SAAS,GAAG,8CAAlB;AAGA,MAAMC,GAAG,GAAG,IAAIb,QAAQ,CAACc,GAAb,CAAiB;EAC3B,UAAU,kCADiB;EAG3B,eAAe;IACb,WAAWP,OADE;IAEb,UAAUE;EAFG,CAHY;EAO7B,UAAU,CACN;IACI,QAAQ;MACJ,SAAS;QACL,OAAOG;MADF;IADL;EADZ,CADM;AAPmB,CAAjB,CAAZ;;AAmBN,MAAOE,GAAP,SAAmBf,SAAnB,CAA6B;EAC3BgB,WAAW,GAAE;IACX;;IADW,KAQZC,aARY,GAQKC,KAAD,IAAW;MAC1B;MACA,KAAKC,QAAL,CAAc;QAACC,KAAK,EAAEF,KAAK,CAACG,MAAN,CAAaC;MAArB,CAAd;IACD,CAXY;;IAAA,KAabC,KAba,GAaL,MAAI;MAGV,KAAKJ,QAAL,CAAc;QAACK,QAAQ,EAAE,KAAKC,KAAL,CAAWL;MAAtB,CAAd;MACAN,GAAG,CAACY,MAAJ,CACGC,OADH,EAEA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACI1B,QAAQ,CAAC2B,iBAXb,EAYI,KAAKH,KAAL,CAAWL,KAZf,EAaGS,IAbH,CAaQC,QAAQ,IAAI;QAChBC,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAkBF,QAAlB;;QACA,IAAIA,QAAJ,EAAc;UACZG,KAAK,CAAC,6BAAD,EAAgC;YACnCC,MAAM,EAAE,KAD2B;YAEnCC,OAAO,EAAE;cAAC,gBAAgB;YAAjB,CAF0B;YAGnCC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;cACnBC,EAAE,EAAE,KAAKd,KAAL,CAAWe,IAAX,CAAgBD;YADD,CAAf;UAH6B,CAAhC,CAAL;QAMG;MAAC,CAtBV,EAJU,CA2BZ;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MAEA;MACA;MACA;MAEA;MACA;MACA;MACA;IACC,CAzDY;;IAEX,KAAKd,KAAL,GAAW;MACTL,KAAK,EAAE,EADE;MAETI,QAAQ,EAAE;IAFD,CAAX;EAID;;EAoDDiB,MAAM,GAAG;IACP,oBACE;MAAK,SAAS,EAAC,KAAf;MAAA,wBACE,QAAC,KAAD;QAAO,SAAS,EAAC;MAAjB;QAAA;QAAA;QAAA;MAAA,QADF,eAEA,QAAC,UAAD;QAAA;QAAA;QAAA;MAAA,QAFA,eAGC,QAAC,IAAD;QAAA;QAAA;QAAA;MAAA,QAHD,eAIC,QAAC,IAAD;QAAA;QAAA;QAAA;MAAA,QAJD,eAKA,QAAC,aAAD;QACA,aAAa,EAAE,KAAKxB,aADpB;QAEA,KAAK,EAAE,KAAKM;MAFZ;QAAA;QAAA;QAAA;MAAA,QALA,eAQA,QAAC,eAAD;QAAiB,QAAQ,EAAE,KAAKE,KAAL,CAAWD;MAAtC;QAAA;QAAA;QAAA;MAAA,QARA;IAAA;MAAA;MAAA;MAAA;IAAA,QADF;EAYH;;AAxE4B;;AA2E7B,eAAeT,GAAf"},"metadata":{},"sourceType":"module"}